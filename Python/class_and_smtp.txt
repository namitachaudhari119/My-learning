**************CLASSES AND OBJECTS*******************
# Creating classes:
class ClassName:
   'Optional class documentation string'
   class_suite

Documentation string can be accessed by ClassName.__doc__.

# Built-in class attributes:
__dict__: Dictionary containing the class's namespace.
__doc__: Class documentation string or none, if undefined.
__name__: Class name.
__module__: Module name in which the class is defined. This attribute is "__main__" in interactive mode.
__bases__: A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.

# Destroying objects:
- Objects are destroyed with help of Garbage Collection.
- Built-in types or class instance gets freed up automatically.
- Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero.
- a class can implement the special method __del__(), called a destructor, that is invoked when the instance is about to be destroyed. 

# Class Inheritance:
A) Class derived from single parent class
class SubClassName (ParentClass1[, ParentClass2, ...]):
   'Optional class documentation string'
   class_suite
   
B) Class derived from multiple parent classes
class A:        # define your class A
.....

class B:         # define your calss B
.....

class C(A, B):   # subclass of A and B
.....

# Overriding Methods:

# Data Hiding: name attributes with a double underscore prefix
- Python protects private members by internally changing the name to include the class name which can be accessed as "object._className__attrName"

**************SMTP*******************